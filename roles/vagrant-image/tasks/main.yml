---

- name: Prepare folder stucture
  become: yes
  file:
    path: "{{item}}"
    recurse: yes
    state: directory
  with_items:
    - "{{ vm_location }}/{{ machine_name}}"
    - "{{ vm_location }}/images/{{ machine_name}}/tmp"
    - "{{ vm_location }}/vagrant/{{ machine_name}}"

- name: Download images
  become: yes
  get_url:
    url: "{{ item }}"
    dest: "{{ vm_location }}/images/{{ machine_name }}/{{ item | basename }}"
  with_items:
    - "{{ coreos_key }}"
    - "{{ coreos_image }}"
    - "{{ coreos_image }}.sig"

- name: Import GPG coreos_key
  become: yes
  command: "gpg --import --keyid-format LONG {{ vm_location }}/images/{{ machine_name }}/{{ coreos_key | basename }}"

- name: Check sign
  become: yes
  command: "gpg --verify {{ vm_location }}/images/{{ machine_name }}/{{ coreos_image | basename }}.sig"
  register: command_result
  failed_when: "'Good signature' not in command_result.stderr"

- name: Extract machine_file
  become: yes
  command: "bzip2 -d -q -f {{ vm_location }}/images/{{ machine_name }}/{{ coreos_image | basename }}"

- name: Create provision file
  become: yes
  template:
    src: provision.ign.j2
    dest: "{{ vm_location }}/{{ machine_name }}/provision.ign"

- name: Virsh define machine
  virt:
      name: coreos
      command: define
      xml: "{{ lookup('template', 'domain.xml.j2') }}"

- name: Start vm
  virt:
      name: coreos
      state: running

- name: Wait for machine bootup
  pause:
    seconds: 45
    prompt: "Applying provision.ing file: user, sudo rules etc."

- name: Stop vm
  virt:
      name: coreos
      command: shutdown

- name: Wait for machine shutdown
  pause:
    seconds: 30
    prompt: "Shutdown...."

- name: Unattach vm
  virt:
      name: coreos
      state: destroyed

# Prepare vagrant image pack

- name: Remove unused space
  become: yes
  command: "virt-sparsify --compress -o compat=0.10 --tmp {{ vm_location }}/images/{{ machine_name }}/tmp/ {{ vm_location }}/images/{{ machine_name }}/{{ coreos_image | basename | splitext | first }} {{ vm_location }}/images/{{ machine_name}}/{{ machine_name }}.img"

- name: Copy image to vagrant box
  become: yes
  copy:
    src: "{{ vm_location }}/images/{{ machine_name}}/{{ machine_name }}.img"
    dest: "{{ vagrant_box_location }}/box.img"

- name: Copy Vagrant machine definition
  become: yes
  copy:
    src: "{{ item }}"
    dest: "{{ vagrant_box_location }}/"
  with_items:
    - "{{ role_path }}/files/metadata.json"
    - "{{ role_path }}/files/Vagrantfile"

- name: Create vagrant archive
  become: yes
  archive:
    path: "{{ vagrant_box_location }}/*"
    dest: "{{ vagrant_box_location }}/{{machine_name}}.box"

- name: Get coreos version file content
  uri:
    url: "{{ coreos_version }}"
    return_content: yes
  register: coreos_version_content

- name: Set version fact
  set_fact:
    image_version: "{{ coreos_version_content.content.splitlines()[3].split('=')[1] }}"

- name: Check if box exist
  uri:
    url: "{{ vagrant_cloud_api }}/box/{{ vagrant_cloud_user}}/{{ machine_name }}-{{coreos_channel}}"
    headers:
      Authorization: "Bearer {{ vagrant_cloud_token}}"
    status_code: 200,404
  register: box

- name: Create new box
  uri:
    url: "{{ vagrant_cloud_api }}/boxes"
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token}}"
    body: '{ "box": { "username": "{{ vagrant_cloud_user}}", "name": "{{ machine_name }}-{{ coreos_channel }}", "is_private": "{{ vagrant_private_img }}", "short_description": "{{ vagrant_description }}"  } }'
    method: POST
    body_format: json
  when: box.status != 200

- name: Check if version exist
  uri:
    url: "{{ vagrant_cloud_api }}/box/{{ vagrant_cloud_user}}/{{ machine_name }}-{{coreos_channel}}/version/{{ image_version }}"
    headers:
      Authorization: "Bearer {{ vagrant_cloud_token}}"
    status_code: 200,404
  register: box_version

- name: Create new version
  uri:
    url: "{{ vagrant_cloud_api }}/box/{{ vagrant_cloud_user}}/{{ machine_name }}-{{coreos_channel}}/versions"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token}}"
    body: '{ "version": { "version": "{{ image_version }}" } }'
    body_format: json
  when: box_version.status != 200

- name: Check if provider exist
  uri:
    url: "{{ vagrant_cloud_api }}/box/{{ vagrant_cloud_user}}/{{ machine_name }}-{{coreos_channel}}/version/{{ image_version }}/provider/libvirt"
    headers:
      Authorization: "Bearer {{ vagrant_cloud_token}}"
    status_code: 200,404
  register: box_version_provider

- name: Create new provider
  uri:
    url: "{{ vagrant_cloud_api }}/box/{{ vagrant_cloud_user}}/{{ machine_name }}-{{coreos_channel}}/version/{{ image_version }}/providers"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ vagrant_cloud_token}}"
    body: '{ "provider": { "name": "libvirt" } }'
    body_format: json
  when: box_version_provider.status != 200

- name: Create upload url
  uri:
    url: "{{ vagrant_cloud_api }}/box/{{ vagrant_cloud_user}}/{{ machine_name }}-{{coreos_channel}}/version/{{ image_version }}/provider/libvirt/upload"
    method: GET
    headers:
      Authorization: "Bearer {{ vagrant_cloud_token}}"
    body_format: json
  register: upload_link

- name: Upload coreos image
  command:  " curl -X PUT --upload-file {{ vagrant_box_location }}/{{machine_name}}.box {{ upload_link.json.upload_path }}"
  register: upload_content

- name: Release new version
  uri:
    url: "{{ vagrant_cloud_api }}/box/{{ vagrant_cloud_user}}/{{ machine_name }}-{{coreos_channel}}/version/{{ image_version }}/release"
    method: PUT
    headers:
      Authorization: "Bearer {{ vagrant_cloud_token}}"

- name: Remove old files
  become: yes
  file:
    path: "{{item}}"
    state: absent
  with_items:
    - "{{ vm_location }}/{{ machine_name}}"
    - "{{ vm_location }}/images/{{ machine_name}}"
    - "{{ vm_location }}/vagrant/{{ machine_name}}"
